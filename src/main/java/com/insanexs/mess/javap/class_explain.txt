cafe babe //U4 魔数
0000 0034 //U2 次版本号 U2主版本号
0024 //U2 CONSTANT_POOL_COUNT 常量池计数 转为十进制为36，说明常量池中有35项常量，从1开始到35（#0被特意空出，给不需要引用常量池中的常量准备）
//开始常量池中常量的分析，分析步骤如下 先根据一个字节确定常量类型（U1表示flag），在根据常量类型的结构确定需要往后读多少个字节
//常量#1
0a //0x0A表示类型为Methodref_info(类中方法) 其结构为(U1 flag;U2 index(指向类描述符); U2 index(指向名称和类型描述符)) =>Class.Method
0005 //指向常量池中0x05的常量 => #5
001e //指向常量池中0x1e的常量 => #30
//常量#2
09 //0x09表示类型为Fieldref_info(类中字段) 其结构为(U1 flag; U2 index(指向类描述符); U2 index(指向名称和类型描述))=>
0004 //指向常量池中0x04的常量 =>#4
001f //指向常量池中0x1f的常量 =>#31
//常量#3
09 //同样是Fieldref_info
0004 // =>#4
0020 // =>#32
//常量#4
07 //0x07表示Class_info(类或接口的符号引用) 其结构为(U1 flag; U2 index(指向全限定名常量))
0021 //指向常量池中的0x21 => #33
//常量#5
07 //同样是Class_info类型
0022 // => #34
//常量#6
01 //0x01表示Utf8_info 表示一个UTF8字符串常量（U1 flag; U2 length(字符串占的字节数); U1 数量为length个，表示byte）说明理论上JVM的字符串常量的字节上线为65535???
000c //length = 0x0c 表示之后12个字节是字符串常量字节内容
5641 525f 434f 4e53 5441 4e54 //UTF-8字符串的内容 用工具翻译成字符串表示为：VAR_CONSTANT
//常量#7
01 //同样是Utf8_info
0012 //length = 18
4c6a 6176 612f 6c61 6e67 2f53 7472 696e 673b //翻译成字符串为：Ljava/lang/String;
//常量#8
01 //同样是Utf8_info
000d //length = 13
436f 6e73 7461 6e74 5661 6c75 65 //翻译成字符串为：ConstantValue
//常量#9
08 //0x08表示String_info 表示字符串字面常量(U1 flag; U2 index(指向字符串字面量))
0023 //指向常量池中的0x23 =>#35
//常量#10
01 //Utf8_info
0008 //length = 8
696e 7446 6965 6c64 //翻译成字符串：intField
//常量#11
01 //Utf8_info
0001 //length = 1
49 //翻译成字符串：I
//常量#12
01 //Utf8_info
000e //length = 14
696e 7441 7272 6179 7346 6965 6c64 //翻译成字符串为：intArraysField
//常量#13
01 //Utf8_info
0002 //length = 2
5b49 //翻译成字符串为：[I
//常量#14
01 //Utf8_info
0008 //length = 8
7374 7246 6965 6c64 //翻译成字符串为：strField
//常量#15
01 //Utf8_info
0006 //length = 6
3c69 6e69 743e //翻译成字符串为：<init>
//常量#16
01 //Utf8_info
0003 //length = 3
2829 56 //翻译成字符串为：()V
//常量#17
01 //Utf8_info
0004 // length = 4
436f 6465 //翻译成字符串为：Code
//常量#18
01 //Utf8_info
000f //length = 15
4c69 6e65 4e75 6d62 6572 5461 626c 65 //翻译成字符串为：LineNumberTable
//常量#19
01 //Utf8_info
0012 //length = 18
4c6f 6361 6c56 6172 6961 626c 6554 6162 6c65 //LocalVariableTable
/常量#20
01 //Utf8_info
0004 //length = 4
7468 6973 //翻译成字符串为：this
//常量#21
01 //Utf8_info
0023 //length = 35
4c 636f 6d2f 696e 7361 6e65 7873 2f6d 6573 732f 6a61 7661 702f 4a61 7661 7054 6573 743b //翻译成字符串为:Lcom/insanexs/mess/javap/JavapTest;
//常量#22
01 //Utf8_info
000c //length = 12
70 7562 6c69 634d 6574 686f 64 //翻译成字符串为：publicMethod
//常量#23
01 //Utf8_info
0018 //length = 24
7072 6f74 6563 7465 6452 6574 7572 6e53 7472 4d65 7468 6f64 //翻译成字符串为：protectedReturnStrMethod
//常量#24
01 //Utf8_info
0014 //length = 20
28 294c 6a61 7661 2f6c 616e 672f 5374 7269 6e67 3b //翻译成字符串为：()Ljava/lang/String;
//常量#25
01 //Utf8_info
0019 //length = 25
7072 6976 6174 6553 796e 6368 726f 6e69 7a65 644d 6574 686f 64 //翻译成字符串为：privateSynchronizedMethod
//常量#26
01 //Utf8_info
0004 //length = 4
2849 2956 //翻译成字符串为：(I)V
//常量#27
01 //Utf8_info
0007 //length = 7
69 6e74 4172 6773 //翻译成字符串为：intArgs
//常量#28
01 //Utf8_info
000a //length = 10
53 6f75 7263 6546 696c 65 //翻译成字符串为：SourceFile
//常量#29
01 //Utf8_info
000e //length = 14
4a61 7661 7054 6573 742e 6a61 7661 //翻译成字符串为：JavapTest.java

0c00 0f00
100c 000e 0007 0c00 0a00 0b01 0021 636f
6d2f 696e 7361 6e65 7873 2f6d 6573 732f
6a61 7661 702f 4a61 7661 7054 6573 7401
0010 6a61 7661 2f6c 616e 672f 4f62 6a65
6374 0100 0843 4f4e 5354 414e 5400 2100
0400 0500 0000 0400 1c00 0600 0700 0100
0800 0000 0200 0900 4200 0a00 0b00 0000
0200 0c00 0d00 0000 0200 0e00 0700 0000
0400 0100 0f00 1000 0100 1100 0000 3300
0100 0100 0000 052a b700 01b1 0000 0002
0012 0000 000a 0002 0000 000d 0004 000f
0013 0000 000c 0001 0000 0005 0014 0015
0000 0001 0016 0010 0001 0011 0000 002b
0000 0001 0000 0001 b100 0000 0200 1200
0000 0600 0100 0000 1300 1300 0000 0c00
0100 0000 0100 1400 1500 0000 0400 1700
1800 0100 1100 0000 2f00 0100 0100 0000
052a b400 02b0 0000 0002 0012 0000 0006
0001 0000 0016 0013 0000 000c 0001 0000
0005 0014 0015 0000 0022 0019 001a 0001
0011 0000 003e 0002 0002 0000 0006 2a1b
b500 03b1 0000 0002 0012 0000 000a 0002
0000 001a 0005 001b 0013 0000 0016 0002
0000 0006 0014 0015 0000 0000 0006 001b
000b 0001 0001 001c 0000 0002 001d